# This file contains pin mappings for the Voron 2.4 350mm with BTT Leviathan V1.1
# To use this config, the firmware should be compiled for the STM32F446 with "No bootloader"
# Enable "extra low-level configuration options" and select the "12MHz crystal" as clock reference

# See docs/Config_Reference.md for a description of parameters.

## Voron Design VORON 2.4 350mm BTT Leviathan V1.1 config

## *** THINGS TO CHANGE/CHECK: ***
## MCU paths                            [mcu] section
## Thermistor types                     [extruder] and [heater_bed] sections - See https://www.klipper3d.org/Config_Reference.html#common-thermistors for common thermistor types
## Z Endstop Switch location            [safe_z_home] section
## Homing end position                  [gcode_macro G32] section
## Z Endstop Switch  offset for Z0      [stepper_z] section
## Probe points                         [quad_gantry_level] section
## Min & Max gantry corner postions     [quad_gantry_level] section
## PID tune                             [extruder] and [heater_bed] sections
## Probe pin                            [probe] section
## Fine tune E steps                    [extruder] section


[mcu pico]
serial: /dev/serial/by-id/usb-Klipper_rp2040_5035586062CA369F-if00
restart_method: command
##--------------------------------------------------------------------

#------------------------------------------------------PUMP------------------------------------------------------------
######################################################################
# BTS7960 PUMP PINS
######################################################################
[output_pin pump_rpwm]
pin: pico:gpio0
pwm: True
cycle_time: 0.001
value: 0.0

[output_pin pump_lpwm]
pin: pico:gpio1
pwm: True
cycle_time: 0.001
value: 0.0

[output_pin pump_r_en]
pin: pico:gpio2
value: 1

[output_pin pump_l_en]
pin: pico:gpio3
value: 1

######################################################################
# PRESSURE SENSOR
######################################################################
[adc_scaled pressure_sensor]
pin: pico:gpio27
vref_pin: pico:gpio25
vssa_pin: pico:gpio24
# Adjust these values based on your specific pressure sensor specifications:
# voltage_range: 
# scale:

######################################################################
# PRESSURE READING MACRO
######################################################################
[gcode_macro GET_PRESSURE]
gcode:
    {% set raw_value = printer["adc_scaled pressure_sensor"].value %}
    {% set pressure_kpa = raw_value * 100 %}  # Adjust scaling factor as needed
    {% set raw_str = raw_value|round(4) %}
    {% set pressure_str = pressure_kpa|round(2) %}
    RESPOND MSG="Pressure Sensor - Raw: ""{{ raw_str }}, Pressure: {{ pressure_str }} kPa"




##--------------------------------------------------------------------

#------------------------------------------------------ PELTIER 1 ------------------------------------------------------
# BTS7960 connections for Peltier on Raspberry Pi Pico

[output_pin pelt1_rpwm]
pin: pico:gpio5
pwm: True
cycle_time: 0.0001   # 10 kHz PWM for smoother control
scale: 1.0

[output_pin pelt1_lpwm]
pin: pico:gpio6
pwm: True
cycle_time: 0.0001
scale: 1.0

[output_pin pelt1_r_en]
pin: pico:gpio7
pwm: False
value: 1      # keep enabled (always ON)

[output_pin pelt1_l_en]
pin: pico:gpio8
pwm: False
value: 1      # keep enabled (always ON)

# Thermistor pin (ADC input)
#[temperature_sensor pelt1_temp]
#sensor_type: EPCOS 100K B57560G104F   # example, change if different #################################################################################################################
#sensor_pin: pico:gpio28
#------------------------------------------------------PELTIER 2------------------------------------------------------------
[output_pin pelt2_rpwm]
pin: pico:gpio9
pwm: True

[output_pin pelt2_lpwm]
pin: pico:gpio10
pwm: True

[output_pin pelt2_r_en]
pin: pico:gpio11
pwm: False

[output_pin pelt2_l_en]
pin: pico:gpio12
pwm: False
##--------------------------------------------------------------------


################################################
######################################################################
# BIDIRECTIONAL PUMP MACRO
######################################################################
[gcode_macro PUMP1]
variable_target: 150.0        # default pressure in kPa
variable_deadband: 2.0        # allowable error
variable_kp: 0.005            # proportional gain for PWM

gcode:
    {% if params.PRESSURE is defined %}
        SET_GCODE_VARIABLE MACRO=PUMP1 VARIABLE=target VALUE={params.PRESSURE|float}
    {% endif %}

    # Start the loop
    UPDATE_DELAYED_GCODE ID=PUMP1_LOOP DURATION=0.2
    {% set target_pressure = target %}
    RESPOND PREFIX="PUMP1" MSG="Pump PID running. Target: {target_pressure} kPa"

######################################################################
# DELAYED GCODE LOOP
######################################################################
[delayed_gcode PUMP1_LOOP]
gcode:
    {% set target = printer["gcode_macro PUMP1"].target|float %}
    {% set kp = printer["gcode_macro PUMP1"].kp|float %}
    {% set deadband = printer["gcode_macro PUMP1"].deadband|float %}
    {% set current = printer["output_pin pressure_sensor"].value|float %}
    {% set error = target - current %}

    # Within deadband, turn off both PWM
    {% if error|abs <= deadband %}
        SET_PIN PIN=pump_rpwm VALUE=0
        SET_PIN PIN=pump_lpwm VALUE=0
    {% elif error > 0 %}
        # Need more pressure → drive forward
        {% set pwm = kp * error %}
        {% if pwm > 1.0 %}
            {% set pwm = 1.0 %}
        {% endif %}
        SET_PIN PIN=pump_rpwm VALUE={pwm}
        SET_PIN PIN=pump_lpwm VALUE=0
    {% else %}
        # Pressure too high → reverse
        {% set pwm = kp * (-error) %}
        {% if pwm > 1.0 %}
            {% set pwm = 1.0 %}
        {% endif %}
        SET_PIN PIN=pump_rpwm VALUE=0
        SET_PIN PIN=pump_lpwm VALUE={pwm}
    {% endif %}

    # Repeat loop after 0.2s
    UPDATE_DELAYED_GCODE ID=PUMP1_LOOP DURATION=0.2

[gcode_macro STOP_PUMP]
gcode:
    UPDATE_DELAYED_GCODE ID=PUMP1_LOOP DURATION=0
    SET_PIN PIN=pump_rpwm VALUE=0
    SET_PIN PIN=pump_lpwm VALUE=0
    RESPOND PREFIX="PUMP1" MSG="Pump stopped."

########################################################################################################################################################

######################################################################
# BIDIRECTIONAL PID CONTROL MACRO (PELTIER1)
######################################################################
[gcode_macro PELTIER1]
variable_target: 25.0
variable_kp: 5.0
variable_deadband: 0.5

gcode:
    {% if params.TEMP is defined %}
        SET_GCODE_VARIABLE MACRO=PELTIER1 VARIABLE=target VALUE={params.TEMP|float}
    {% endif %}

    # Start the loop
    UPDATE_DELAYED_GCODE ID=PELTIER1_LOOP DURATION=0.5
    {% set target_temp = target %}
    RESPOND PREFIX="PELTIER1" MSG="Peltier1 PID running. Target: {target_temp}C"

######################################################################
# DELAYED GCODE LOOP
######################################################################
[delayed_gcode PELTIER1_LOOP]
gcode:
    {% set target = printer["gcode_macro PELTIER1"].target|float %}
    {% set kp = printer["gcode_macro PELTIER1"].kp|float %}
    {% set deadband = printer["gcode_macro PELTIER1"].deadband|float %}
    {% set current = printer["temperature_sensor pelt1_temp"].temperature|float %}
    {% set error = target - current %}

    # Within deadband, turn off both PWM
    {% if error|abs <= deadband %}
        SET_PIN PIN=pelt1_rpwm VALUE=0
        SET_PIN PIN=pelt1_lpwm VALUE=0
    {% elif error > 0 %}
        # Heating needed → drive LPWM
        {% set raw_pwm = kp * error %}
        {% if raw_pwm > 1.0 %}
            {% set pwm = 1.0 %}
        {% else %}
            {% set pwm = raw_pwm %}
        {% endif %}
        SET_PIN PIN=pelt1_rpwm VALUE=0
        SET_PIN PIN=pelt1_lpwm VALUE={pwm}
    {% else %}
        # Cooling needed → drive RPWM
        {% set raw_pwm = kp * (-error) %}
        {% if raw_pwm > 1.0 %}
            {% set pwm = 1.0 %}
        {% else %}
            {% set pwm = raw_pwm %}
        {% endif %}
        SET_PIN PIN=pelt1_rpwm VALUE={pwm}
        SET_PIN PIN=pelt1_lpwm VALUE=0
    {% endif %}

    # Loop again after 0.5s
    UPDATE_DELAYED_GCODE ID=PELTIER1_LOOP DURATION=0.5


###################v#########################################################
[temperature_sensor Raspberry_Pi_Pico]
sensor_type: temperature_mcu
sensor_mcu: pico